# Import necessary libraries
import pandas as pd 
import matplotlib
matplotlib.use('Agg')  # Use a non-interactive backend
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px 
from statsmodels.tsa.seasonal import seasonal_decompose
 
# Step 1: Data Collection

# Load the dataset
df = pd.read_csv('Tourism Data.csv')

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(df.head())

# Step 2: Data Cleaning

# Check for missing values
print("\nMissing values in the dataset:")
print(df.isnull().sum())

# Fill missing values (using forward fill method)
df.fillna(method='ffill', inplace=True)

# Check for duplicate rows and remove them
print("\nNumber of duplicate rows:", df.duplicated().sum())
df.drop_duplicates(inplace=True)

# Step 3: Data Analysis

# Descriptive statistics
print("\nDescriptive statistics:")
print(df.describe())

# Analyze trends: number of tourists over time
tourists_over_time = df.groupby('Year')['Number_of_Tourists'].sum()
print("\nNumber of tourists over time:")
print(tourists_over_time)

# Analyze relationships: tourists vs. revenue
tourists_vs_revenue = df.groupby('Year')[['Number_of_Tourists', 'Revenue']].sum()
print("\nTourists vs. revenue over time:")
print(tourists_vs_revenue)

# Average spending per tourist over the years for each country
avg_spending = df.groupby(['Year', 'Country'])['Average_Spending'].mean()
print("\nAverage spending per tourist over the years for each country:")
print(avg_spending)

# Total revenue generated by each country over the given period
total_revenue = df.groupby('Country')['Revenue'].sum()
print("\nTotal revenue generated by each country over the given period:")
print(total_revenue)

# Yearly change in the number of tourists for each country
yearly_change = df.groupby(['Country', 'Year'])['Number_of_Tourists'].sum().groupby(level=0).pct_change()
print("\nYearly change in the number of tourists for each country:")
print(yearly_change)

# Step 4: Data Visualization

# Plot the number of tourists over time
tourists_over_time = df.groupby('Year')['Number_of_Tourists'].sum()

plt.figure(figsize=(10, 6))
plt.plot(tourists_over_time.index, tourists_over_time.values, marker='o', color='navy', linestyle='-', linewidth=2, markersize=6)
plt.title('Number of Tourists Over Time', fontsize=16, fontweight='bold', loc='center')
plt.xlabel('Year', fontsize=14, fontweight='bold')
plt.ylabel('Number of Tourists', fontsize=14, fontweight='bold')
plt.grid(True, linestyle='--', alpha=0.6)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.text(tourists_over_time.index.min(), tourists_over_time.max()*1.15, 'X: Year\nY: Number of Tourists\n1 unit = 1000 tourists',
         fontsize=10, bbox=dict(facecolor='white', alpha=0.8), verticalalignment='top', horizontalalignment='left', color='black')
plt.show()

# Plot revenue distribution
plt.figure(figsize=(10, 6))
plt.hist(df['Revenue'], bins=20, color='skyblue', edgecolor='black', alpha=0.7)
plt.title('Revenue Distribution', fontsize=16, fontweight='bold', loc='center')
plt.xlabel('Revenue', fontsize=14, fontweight='bold')
plt.ylabel('Frequency', fontsize=14, fontweight='bold')
plt.grid(True, linestyle='--', alpha=0.6)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.text(df['Revenue'].min(), df['Revenue'].value_counts().max()*1.15, 'X: Revenue\nY: Frequency\n1 unit = 1 revenue unit',
         fontsize=10, bbox=dict(facecolor='white', alpha=0.8), verticalalignment='top', horizontalalignment='left', color='black')
plt.show()

# Interactive plot of number of tourists by country and year
fig = px.line(df, x='Year', y='Number_of_Tourists', color='Country', title='Number of Tourists Over Time by Country',
              markers=True, line_shape='linear', template='plotly_white')
fig.update_traces(line=dict(width=2), marker=dict(size=8, symbol='circle'))
fig.update_layout(title={'text': 'Number of Tourists Over Time by Country', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 20, 'color': 'black', 'family': 'Arial', 'weight': 'bold'}},
                  xaxis_title='Year', yaxis_title='Number of Tourists', legend_title='Country')
fig.add_annotation(
    x=2015, y=max(df['Number_of_Tourists'])*1.15,
    text='X: Year\nY: Number of Tourists\n1 unit = 1000 tourists',
    showarrow=False,
    font=dict(size=12, color='black'),
    bgcolor="white",
    opacity=1.0,
    align='left'
)
fig.show()

# Interactive plot of revenue by country and year
fig = px.bar(df, x='Year', y='Revenue', color='Country', title='Revenue Over Time by Country', barmode='group',
             template='plotly_white')
fig.update_traces(marker=dict(line=dict(color='black', width=1)))
fig.update_layout(title={'text': 'Revenue Over Time by Country', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 20, 'color': 'black', 'family': 'Arial', 'weight': 'bold'}},
                  xaxis_title='Year', yaxis_title='Revenue', legend_title='Country',
                  bargap=0.15, bargroupgap=0.1)
fig.add_annotation(
    x=2015, y=max(df['Revenue'])*1.15,
    text='X: Year\nY: Revenue\n1 unit = 1 revenue unit',
    showarrow=False,
    font=dict(size=12, color='black'),
    bgcolor="white",
    opacity=1.0,
    align='left'
)
fig.show()


# Additional element

# Group by year and sum the Number_of_Tourists for time series analysis
tourists_over_time = df.groupby('Year')['Number_of_Tourists'].sum()

# Perform seasonal decomposition
decomposition = seasonal_decompose(tourists_over_time, model='multiplicative', period=1)

# Plot the decomposition
fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(15, 12), sharex=True)

decomposition.observed.plot(ax=ax1, legend=False)
ax1.set_ylabel('Observed')
ax1.set_title('Time Series Decomposition of Tourists Over Time', fontsize=16, fontweight='bold', pad=20)

decomposition.trend.plot(ax=ax2, legend=False)
ax2.set_ylabel('Trend')

decomposition.seasonal.plot(ax=ax3, legend=False)
ax3.set_ylabel('Seasonal')

decomposition.resid.plot(ax=ax4, legend=False)
ax4.set_ylabel('Residual')

# Adjust layout and save the figure
fig.tight_layout(pad=3.0)
plt.xlabel('Year')
plt.savefig('time_series_decomposition.png', bbox_inches='tight', pad_inches=0.5)
plt.show()


# Step 5: Conclusion

# Summarizing insights and findings
print("\n--- Conclusion ---")
print("1. Trends in Tourist Numbers: Across all countries studied (Country A to Country H), there is a general trend of increasing tourist numbers up until 2019, followed by a notable decline in 2020. This decline in 2020 can be attributed to global events impacting travel and tourism.")
print("2. Revenue Trends: Total revenue generated by each country shows a similar trend to tourist numbers, reflecting increases up to 2019 and decreases in 2020. Countries such as Country F and Country A consistently generated higher revenue compared to others, likely due to higher tourist volumes and average spending.")
print("3. Average Spending: Average spending per tourist remained consistent at 700 units across all years and countries in the dataset. This stability suggests that while tourist numbers and revenue fluctuated, the average spending per tourist did not vary significantly.")
print("4. Country-specific Analysis: Countries like Country A, Country B, and Country C demonstrated steady growth in tourist arrivals and revenue over the years, while others, like Country G and Country H, showed more variability in their tourism metrics.")
print("5. Implications: The observed decline in 2020 underscores the vulnerability of the tourism sector to external shocks. Moving forward, stakeholders should focus on resilience strategies, such as diversifying tourist markets and enhancing crisis preparedness, to mitigate future disruptions.")
print("6. Limitations: This analysis is based on hypothetical data and does not account for real-world factors like geopolitical events or economic crises, which could significantly impact tourism trends.")